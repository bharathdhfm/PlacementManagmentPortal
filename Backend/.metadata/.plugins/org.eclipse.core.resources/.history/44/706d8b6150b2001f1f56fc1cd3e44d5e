package com.kledf.springboot.service;

import java.io.IOException; // For handling file I/O exceptions
import java.nio.file.Files; // For creating directories and writing files
import java.nio.file.Path; // For file path representation
import java.nio.file.Paths; // For creating Path objects
import java.util.List; // For working with lists
import java.util.Optional; // For handling optional values
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired; // For dependency injection
import org.springframework.stereotype.Service; // To define a service class
import org.springframework.web.multipart.MultipartFile; // For handling file uploads

import com.kledf.springboot.model.Job; // Your Job entity class
import com.kledf.springboot.model.Student; // Your Student entity class
import com.kledf.springboot.repository.JobRepository; // Repository for Job operations
import com.kledf.springboot.repository.StudentRepository; // Repository for Student operations


@Service
public class StudentServiceImpl implements StudentService {

    @Autowired
    private StudentRepository studentRepository;

    @Autowired
    private JobRepository jobRepository;
    private static final String UPLOAD_DIR = "uploads/";

    @Override
    public void StudentRegistration(Student student) {
        studentRepository.save(student);
    }

    @Override
    public Student CheckStudentLogin(String email, String password) {
        return studentRepository.checkStudentLogin(email, password);
    }

    @Override
    public List<Student> getAllStudents() {
        return studentRepository.findAll(); // Fetch all students from the database
    }

    @Override
    public List<Job> getAllJobs() {
        return jobRepository.findAll(); // Retrieve all jobs from the database
    }

   /* @Override
    public boolean applyForJob(int studentId, Long jobId) {
        Optional<Student> studentOpt = studentRepository.findById(studentId);
        Optional<Job> jobOpt = jobRepository.findById(jobId);

        if (studentOpt.isPresent() && jobOpt.isPresent()) {
            Student student = studentOpt.get();
            Job job = jobOpt.get();

            // Check if the student has already applied for the job
            if (!student.getAppliedJobs().contains(job)) {
                student.getAppliedJobs().add(job);
                studentRepository.save(student);
                return true; // Successfully applied
            }
        }
        return false; // Application failed
    }*/

    /*@Override
    public List<Job> getAppliedJobs(int studentId) {
        Optional<Student> studentOpt = studentRepository.findById(studentId);
        return studentOpt.map(Student::getAppliedJobs).orElse(List.of()); // Return applied jobs or empty list
    }*/
    
    @Override
    public Student findByEmail(String email) {
        return studentRepository.findByEmail(email);
    }
    @Override
    public String saveProfilePhoto(String email, MultipartFile file) throws IOException {
        String fileName = UUID.randomUUID().toString() + "_" + file.getOriginalFilename();
        Path path = Paths.get(UPLOAD_DIR + fileName);
        Files.createDirectories(path.getParent()); // Create directories if they do not exist
        Files.write(path, file.getBytes());
        return fileName;
    }

    public void updateProfilePhoto(String email, String fileName) {
        Student student = studentRepository.findByEmail(email);
        if (student != null) {
            student.setProfilePhotoUrl(UPLOAD_DIR + fileName);
            studentRepository.save(student);
        }
    }
    
   
    


}
