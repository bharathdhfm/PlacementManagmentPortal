package com.kledf.springboot.service;

import java.util.UUID;

import jakarta.mail.MessagingException;
import jakarta.mail.internet.MimeMessage;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.kledf.springboot.model.Student;
import com.kledf.springboot.repository.StudentRepository;

@Service
public class PasswordResetServiceImpl implements PasswordResetService {

    @Autowired
    private StudentRepository studentRepository;

    @Autowired
    private JavaMailSender mailSender;

    @Override
    public String sendPasswordResetEmail(String email) throws MessagingException {
        Student student = studentRepository.findByEmail(email); // This can be null if no student is found
        if (student != null) {
            String resetToken = UUID.randomUUID().toString();  // Generate a unique reset token
            student.setPasswordResetToken(resetToken);  // Save the token in the student's record
            studentRepository.save(student);

            // Send reset email
            sendResetEmail(email, resetToken);
            return "Password reset link sent to your email.";
        } else {
            throw new IllegalArgumentException("Email not found.");
        }
    }

    @Override
    public String resetPassword(String token, String newPassword) {
        Student student = studentRepository.findByPasswordResetToken(token); // This can be null if no student is found
        if (student != null) {
            BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();
            String encodedPassword = encoder.encode(newPassword);
            
            student.setPassword(encodedPassword);  // Set the new password
            student.setPasswordResetToken(null);  // Remove the reset token
            studentRepository.save(student);

            return "Password successfully reset.";
        } else {
            throw new IllegalArgumentException("Invalid reset token.");
        }
    }

    private void sendResetEmail(String email, String resetToken) throws MessagingException {
        MimeMessage mimeMessage = mailSender.createMimeMessage();
        MimeMessageHelper helper = new MimeMessageHelper(mimeMessage);
        helper.setTo(email);
        helper.setSubject("Password Reset");
        helper.setText("To reset your password, click the following link: " +
                       "http://localhost:8080/reset-password?token=" + resetToken);

        mailSender.send(mimeMessage);
    }
}
